source("C:/Users/Juan/OneDrive/IE_Classes/2022_Fall/ZZ_Notebooks/NB_BDBA_Fall2022/ZZ_NameSelector/ZZ_name_selector.R", echo=TRUE)
sample(t$V1, size = 1)
library(fpp3)
aus_retail %>%
filter(Industry == "Takeaway food services") %>%
summarize(
Turnover = sum(Turnover)
)
library(fpp3)
aus_retail %>%
filter(Industry == "Takeaway food services") %>%
summarize(
Turnover = sum(Turnover)
)
takeaway <- aus_retail %>%
filter(Industry == "Takeaway food services")
takeaway <- aus_retail %>%
filter(Industry == "Takeaway food services") %>%
summarise(Turnover = sum(Turnover))
autoplot(takeaway) +
scale_x_yearmonth(date_breaks = "1 year",
date_minor_breaks = "1 year",
date_labels = "%y-%b") +
# Flip x-labels by 90 degrees
theme(axis.text.x = element_text(angle = 90))
aus_retail
aus_retail %>%
filter(Industry == "Takeaway food services")
aus_retail %>%
filter(Industry == "Takeaway food services") %>%
index_by(Month) %>%
summarize(
Turnover = sum(Turnover)
)
aus_retail %>%
filter(Industry == "Takeaway food services") %>%
summarize(
Turnover = sum(Turnover)
)
test_years = 4
train <- takeaway %>%
filter(Month <= max(Month) - test_years * 12)
# Check that the test dataset does indeed contain 4*12 years
nrow(takeaway) - nrow(train) == 4*12
lambda <- takeaway %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
lambda
takeaway %>% autoplot(box_cox(Turnover, lambda))
takeaway %>% autoplot(log(Turnover))
STL(log(Turnover))
STL(log(Turnover)) %>% components()
STL(log(Turnover)) %>% components()
model(STL(log(Turnover))) %>% components()
model(STL(log(Turnover))) %>% components()
train %>% model(STL(log(Turnover))) %>% components()
fit <- train %>%
model(
decomp_log = decomposition_model(
# Specify decomposition scheme to be used
STL(log(Turnover)),
# Specify model for the seasonally adjusted component
RW(season_adjust ~ drift()),
# Specify model for the seasonal component (unnecessary since SNAIVE is default)
SNAIVE(season_year)
),
decomp_bc = decomposition_model(
# Specify decomposition scheme to be used
STL(box_cox(Turnover, lambda)),
# Specify model for the seasonally adjusted component
RW(season_adjust ~ drift()),
# Specify model for the seasonal component (unnecessary since SNAIVE is default)
SNAIVE(season_year)
),
decomp = decomposition_model(
# Specify decomposition scheme to be used
STL(Turnover),
# Specify model for the seasonally adjusted component
RW(season_adjust ~ drift()),
# Specify model for the seasonal component (unnecessary since SNAIVE is default)
SNAIVE(season_year)
),
naive = NAIVE(Turnover),
drift = RW(Turnover ~ drift()),
mean = MEAN(Turnover),
snaive = SNAIVE(Turnover),
SES = ETS(Turnover ~ error("A") + trend("N") + season("N"))
)
fit
fc <- fit %>% forecast(h = "4 years")
fc
fit %>% augment()
fit %>%
accuracy() %>%
arrange(MASE) %>%
select(.model, .type, MAE, RMSE, MAPE, MASE, RMSSE)
fc %>%
accuracy(takeaway) %>%
arrange(MASE) %>%
select(.model, .type, MAE, RMSE, MAPE, MASE, RMSSE)
fc %>%
filter(.model == "decomp_bc") %>%
autoplot(takeaway)
test <- takeaway %>%
filter(Month > max(Month) - test_years * 12)
fc %>%
filter(.model == "decomp_bc") %>%
autoplot(test)
fitted_vals <- fit %>% augment()
fitted_vals %>%
filter(.model == "decomp_bc") %>%
autoplot(Turnover, colour = "gray") +
geom_line(aes(y=.fitted), colour = "blue", linetype = "dashed")
fit %>%
select(decomp_bc) %>%
gg_tsresiduals()
